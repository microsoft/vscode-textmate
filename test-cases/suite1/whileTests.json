[
	{
		"grammars": [
			"fixtures/whileLang.plist"
		],
		"grammarPath": "fixtures/whileLang.plist",
		"desc": "While should match begin and stop on next line if while condition fails",
		"lines": [
			{
				"line": "A x",
				"tokens": [
					{
						"scopes": [
							"text.whileLang",
							"alist"
						],
						"value": "A"
					},
					{
						"scopes": [
							"text.whileLang",
							"alist"
						],
						"value": " "
					},
					{
						"scopes": [
							"text.whileLang",
							"alist",
							"letter"
						],
						"value": "x"
					}
				]
			},
			{
				"line": "c",
				"tokens": [
					{
						"scopes": [
							"text.whileLang"
						],
						"value": "c"
					}
				]
			}
		]
	},
	{
		"grammars": [
			"fixtures/whileLang.plist"
		],
		"grammarPath": "fixtures/whileLang.plist",
		"desc": "While should match multiple lines while condition holds",
		"lines": [
			{
				"line": "A x",
				"tokens": [
					{
						"scopes": [
							"text.whileLang",
							"alist"
						],
						"value": "A"
					},
					{
						"scopes": [
							"text.whileLang",
							"alist"
						],
						"value": " "
					},
					{
						"scopes": [
							"text.whileLang",
							"alist",
							"letter"
						],
						"value": "x"
					}
				]
			},
			{
				"line": "ax x",
				"tokens": [
					{
						"scopes": [
							"text.whileLang",
							"alist"
						],
						"value": "a"
					},
					{
						"scopes": [
							"text.whileLang",
							"alist",
							"letter"
						],
						"value": "x"
					},
					{
						"scopes": [
							"text.whileLang",
							"alist"
						],
						"value": " "
					},
					{
						"scopes": [
							"text.whileLang",
							"alist",
							"letter"
						],
						"value": "x"
					}
				]
			},
			{
				"line": "c",
				"tokens": [
					{
						"scopes": [
							"text.whileLang"
						],
						"value": "c"
					}
				]
			}
		]
	},
	{
		"grammars": [
			"fixtures/whileLang.plist"
		],
		"grammarPath": "fixtures/whileLang.plist",
		"desc": "While condition can match anywhere in line",
		"lines": [
			{
				"line": "A x",
				"tokens": [
					{
						"scopes": [
							"text.whileLang",
							"alist"
						],
						"value": "A"
					},
					{
						"scopes": [
							"text.whileLang",
							"alist"
						],
						"value": " "
					},
					{
						"scopes": [
							"text.whileLang",
							"alist",
							"letter"
						],
						"value": "x"
					}
				]
			},
			{
				"line": "xax",
				"tokens": [
					{
						"scopes": [
							"text.whileLang",
							"alist"
						],
						"value": "x"
					},
					{
						"scopes": [
							"text.whileLang",
							"alist"
						],
						"value": "a"
					},
					{
						"scopes": [
							"text.whileLang",
							"alist",
							"letter"
						],
						"value": "x"
					}
				]
			}
		]
	},
	{
		"grammars": [
			"fixtures/whileLang.plist"
		],
		"grammarPath": "fixtures/whileLang.plist",
		"desc": "Begin of while should consume entire rest of line.",
		"lines": [
			{
				"line": "A x B 1",
				"tokens": [
					{
						"scopes": [
							"text.whileLang",
							"alist"
						],
						"value": "A"
					},
					{
						"scopes": [
							"text.whileLang",
							"alist"
						],
						"value": " "
					},
					{
						"scopes": [
							"text.whileLang",
							"alist",
							"letter"
						],
						"value": "x"
					},
					{
						"scopes": [
							"text.whileLang",
							"alist"
						],
						"value": " "
					},
					{
						"scopes": [
							"text.whileLang",
							"alist",
							"blist"
						],
						"value": "B"
					},
					{
						"scopes": [
							"text.whileLang",
							"alist",
							"blist"
						],
						"value": " "
					},
					{
						"scopes": [
							"text.whileLang",
							"alist",
							"blist",
							"number"
						],
						"value": "1"
					}
				]
			}
		]
	},
	{
		"grammars": [
			"fixtures/whileLang.plist"
		],
		"grammarPath": "fixtures/whileLang.plist",
		"desc": "Nested whiles should match using only inner most while on a mached line",
		"lines": [
			{
				"line": "AB",
				"tokens": [
					{
						"scopes": [
							"text.whileLang",
							"alist"
						],
						"value": "A"
					},
					{
						"scopes": [
							"text.whileLang",
							"alist",
							"blist"
						],
						"value": "B"
					}
				]
			},
			{
				"line": "abx1",
				"tokens": [
					{
						"scopes": [
							"text.whileLang",
							"alist"
						],
						"value": "a"
					},
					{
						"scopes": [
							"text.whileLang",
							"alist",
							"blist",
							"bstart"
						],
						"value": "b"
					},
					{
						"scopes": [
							"text.whileLang",
							"alist",
							"blist"
						],
						"value": "x"
					},
					{
						"scopes": [
							"text.whileLang",
							"alist",
							"blist",
							"number"
						],
						"value": "1"
					}
				]
			}
		]
	},
	{
		"grammars": [
			"fixtures/whileLang.plist"
		],
		"grammarPath": "fixtures/whileLang.plist",
		"desc": "Nested whiles should check line for outer most while to inner most while",
		"lines": [
			{
				"line": "AB",
				"tokens": [
					{
						"scopes": [
							"text.whileLang",
							"alist"
						],
						"value": "A"
					},
					{
						"scopes": [
							"text.whileLang",
							"alist",
							"blist"
						],
						"value": "B"
					}
				]
			},
			{
				"line": "b1",
				"tokens": [
					{
						"scopes": [
							"text.whileLang"
						],
						"value": "b1"
					}
				]
			}
		]
	},
	{
		"grammars": [
			"fixtures/whileLang.plist"
		],
		"grammarPath": "fixtures/whileLang.plist",
		"desc": "Nested whiles should move line ahead before checking other conditions",
		"lines": [
			{
				"line": "AB",
				"tokens": [
					{
						"scopes": [
							"text.whileLang",
							"alist"
						],
						"value": "A"
					},
					{
						"scopes": [
							"text.whileLang",
							"alist",
							"blist"
						],
						"value": "B"
					}
				]
			},
			{
				"line": "bax",
				"tokens": [
					{
						"scopes": [
							"text.whileLang",
							"alist"
						],
						"value": "b"
					},
					{
						"scopes": [
							"text.whileLang",
							"alist"
						],
						"value": "a"
					},
					{
						"scopes": [
							"text.whileLang",
							"alist",
							"letter"
						],
						"value": "x"
					}
				]
			}
		]
	},
	{
		"grammars": [
			"fixtures/whileLang.plist"
		],
		"grammarPath": "fixtures/whileLang.plist",
		"desc": "Nested whiles should check line for outer most while to inner most while",
		"lines": [
			{
				"line": "AB",
				"tokens": [
					{
						"scopes": [
							"text.whileLang",
							"alist"
						],
						"value": "A"
					},
					{
						"scopes": [
							"text.whileLang",
							"alist",
							"blist"
						],
						"value": "B"
					}
				]
			},
			{
				"line": "b1",
				"tokens": [
					{
						"scopes": [
							"text.whileLang"
						],
						"value": "b1"
					}
				]
			}
		]
	},
	{
		"grammars": [
			"fixtures/whileLang.plist"
		],
		"grammarPath": "fixtures/whileLang.plist",
		"desc": "Should Correctly handle anchor in while rule",
		"lines": [
			{
				"line": "BB",
				"tokens": [
					{
						"scopes": [
							"text.whileLang",
							"blist"
						],
						"value": "B"
					},
					{
						"scopes": [
							"text.whileLang",
							"blist",
							"blist"
						],
						"value": "B"
					}
				]
			},
			{
				"line": "b b",
				"tokens": [
					{
						"scopes": [
							"text.whileLang",
							"blist",
							"bstart"
						],
						"value": "b"
					},
					{
						"scopes": [
							"text.whileLang",
							"blist"
						],
						"value": " b"
					}
				]
			}
		]
	}
]